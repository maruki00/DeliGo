syntax = "proto3";


option go_package = "user.grpc";

import "google/protobuf/any.proto";
import "google/api/annotations.proto";
import "google/api/date.proto";



message User {
	string id = 1 [json_name = "id"];
	string user_name = 2 [json_name = "user_name"];
	string full_name = 3 [json_name = "full_name"];
	string email = 4 [json_name = "email"];
	string address = 5 [json_name = "address"];
	string password = 6 [json_name = "password"];
	string user_type =7 [json_name = "user_type"];
	string status =8 [json_name = "status"];
	string created_at = 9 [json_name = "created_at"]; // google.api.Date
	string updated_at = 10 [json_name = "updated_at"]; // google.api.Date
	string deleted_at = 11 [json_name = "deleted_at"]; // google.api.Date
}
message CreateUserRequest  {
	string UserName   = 1 [ json_name  = "user_name" ];
	string FullName   = 2 [ json_name  = "full_name" ];
	string Address    = 3 [ json_name  = "address" ];
	string Email      = 4 [ json_name  = "email" ];
	string Password   = 5 [ json_name  = "password" ];
}

message DeleteUserRequest {
	string Login    = 1 [ json_name = "login" ];
	string Password = 2 [ json_name = "password" ];
}

message UpdateUserRequest {
	int32     Pin = 1   [json_name = "pin" ];
	string  Email = 2 [json_name = "email" ];
}

message EmptyUserResponse{}
message UserResponse {
    int32 Code = 1 [ json_name = "code"];
    string Message = 2 [ json_name = "message"];
    string Data = 3 [ json_name = "data"]; //  google.api.Date
}


service UserService {
	rpc Create(CreateUserRequest) returns (UserResponse) {
		option (google.api.http) = {
			post: "/v1/user/create",
			body: "*"
		};
	};
	
	rpc Delete(DeleteUserRequest) returns (UserResponse) {
		option (google.api.http) = {
			delete: "/v1/user/delete",
			body: "*"
		};
	};

	rpc Update(UpdateUserRequest) returns (UserResponse) {
		option (google.api.http) = {
			put: "/v1/user/update",
			body: "*"
		};
	};

	rpc GetOne(EmptyUserResponse) returns (UserResponse) {
		option (google.api.http) = {
			get: "/v1/user",
			body: "*"
		};
	};

	rpc GetMany(EmptyUserResponse) returns (UserResponse) {
		option (google.api.http) = {
			get: "/v1/users",
			body: "*"
		};
	};
	


	rpc Search(EmptyUserResponse) returns (UserResponse) {
		option (google.api.http) = {
			post: "/v1/users/search",
			body: "*"
		};
	};
} 