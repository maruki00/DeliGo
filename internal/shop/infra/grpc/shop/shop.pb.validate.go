// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: shop.proto

package profile_grpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Profile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Profile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Profile with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProfileMultiError, or nil if none found.
func (m *Profile) ValidateAll() error {
	return m.validate(true)
}

func (m *Profile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for ShopName

	// no validation rules for OpenAt

	// no validation rules for CloseAt

	if len(errors) > 0 {
		return ProfileMultiError(errors)
	}

	return nil
}

// ProfileMultiError is an error wrapping multiple validation errors returned
// by Profile.ValidateAll() if the designated constraints aren't met.
type ProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileMultiError) AllErrors() []error { return m }

// ProfileValidationError is the validation error returned by Profile.Validate
// if the designated constraints aren't met.
type ProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileValidationError) ErrorName() string { return "ProfileValidationError" }

// Error satisfies the builtin error interface
func (e ProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileValidationError{}

// Validate checks the field values on CreateShopRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateShopRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShopRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShopRequestMultiError, or nil if none found.
func (m *CreateShopRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShopRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetShopName()); l < 4 || l > 100 {
		err := CreateShopRequestValidationError{
			field:  "ShopName",
			reason: "value length must be between 4 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetOpenAt()); l < 1 || l > 56 {
		err := CreateShopRequestValidationError{
			field:  "OpenAt",
			reason: "value length must be between 1 and 56 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCloseAt()); l < 4 || l > 56 {
		err := CreateShopRequestValidationError{
			field:  "CloseAt",
			reason: "value length must be between 4 and 56 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateShopRequestMultiError(errors)
	}

	return nil
}

// CreateShopRequestMultiError is an error wrapping multiple validation errors
// returned by CreateShopRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateShopRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShopRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShopRequestMultiError) AllErrors() []error { return m }

// CreateShopRequestValidationError is the validation error returned by
// CreateShopRequest.Validate if the designated constraints aren't met.
type CreateShopRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShopRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShopRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShopRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShopRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShopRequestValidationError) ErrorName() string {
	return "CreateShopRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShopRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShopRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShopRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShopRequestValidationError{}

// Validate checks the field values on UpdateShopRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateShopRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShopRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShopRequestMultiError, or nil if none found.
func (m *UpdateShopRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShopRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 4 || l > 100 {
		err := UpdateShopRequestValidationError{
			field:  "ID",
			reason: "value length must be between 4 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetShopName()); l < 4 || l > 100 {
		err := UpdateShopRequestValidationError{
			field:  "ShopName",
			reason: "value length must be between 4 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetOpenAt()); l < 1 || l > 56 {
		err := UpdateShopRequestValidationError{
			field:  "OpenAt",
			reason: "value length must be between 1 and 56 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCloseAt()); l < 4 || l > 56 {
		err := UpdateShopRequestValidationError{
			field:  "CloseAt",
			reason: "value length must be between 4 and 56 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateShopRequestMultiError(errors)
	}

	return nil
}

// UpdateShopRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateShopRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateShopRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShopRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShopRequestMultiError) AllErrors() []error { return m }

// UpdateShopRequestValidationError is the validation error returned by
// UpdateShopRequest.Validate if the designated constraints aren't met.
type UpdateShopRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShopRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShopRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShopRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShopRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShopRequestValidationError) ErrorName() string {
	return "UpdateShopRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShopRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShopRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShopRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShopRequestValidationError{}

// Validate checks the field values on UpdateShopStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShopStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShopStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShopStatusRequestMultiError, or nil if none found.
func (m *UpdateShopStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShopStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 4 || l > 100 {
		err := UpdateShopStatusRequestValidationError{
			field:  "ID",
			reason: "value length must be between 4 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateShopStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateShopStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateShopStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateShopStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShopStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShopStatusRequestMultiError) AllErrors() []error { return m }

// UpdateShopStatusRequestValidationError is the validation error returned by
// UpdateShopStatusRequest.Validate if the designated constraints aren't met.
type UpdateShopStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShopStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShopStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShopStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShopStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShopStatusRequestValidationError) ErrorName() string {
	return "UpdateShopStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShopStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShopStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShopStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShopStatusRequestValidationError{}

// Validate checks the field values on DeleteShopRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteShopRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShopRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShopRequestMultiError, or nil if none found.
func (m *DeleteShopRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShopRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 4 || l > 32 {
		err := DeleteShopRequestValidationError{
			field:  "ID",
			reason: "value length must be between 4 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteShopRequestMultiError(errors)
	}

	return nil
}

// DeleteShopRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteShopRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteShopRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShopRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShopRequestMultiError) AllErrors() []error { return m }

// DeleteShopRequestValidationError is the validation error returned by
// DeleteShopRequest.Validate if the designated constraints aren't met.
type DeleteShopRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShopRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShopRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShopRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShopRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShopRequestValidationError) ErrorName() string {
	return "DeleteShopRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShopRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShopRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShopRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShopRequestValidationError{}

// Validate checks the field values on GETRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GETRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GETRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GETRequestMultiError, or
// nil if none found.
func (m *GETRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GETRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQueryParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GETRequestValidationError{
					field:  "QueryParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GETRequestValidationError{
					field:  "QueryParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQueryParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GETRequestValidationError{
				field:  "QueryParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GETRequestMultiError(errors)
	}

	return nil
}

// GETRequestMultiError is an error wrapping multiple validation errors
// returned by GETRequest.ValidateAll() if the designated constraints aren't met.
type GETRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GETRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GETRequestMultiError) AllErrors() []error { return m }

// GETRequestValidationError is the validation error returned by
// GETRequest.Validate if the designated constraints aren't met.
type GETRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GETRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GETRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GETRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GETRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GETRequestValidationError) ErrorName() string { return "GETRequestValidationError" }

// Error satisfies the builtin error interface
func (e GETRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGETRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GETRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GETRequestValidationError{}

// Validate checks the field values on ShopResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShopResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShopResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShopResponseMultiError, or
// nil if none found.
func (m *ShopResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShopResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShopResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShopResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShopResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ShopResponseMultiError(errors)
	}

	return nil
}

// ShopResponseMultiError is an error wrapping multiple validation errors
// returned by ShopResponse.ValidateAll() if the designated constraints aren't met.
type ShopResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShopResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShopResponseMultiError) AllErrors() []error { return m }

// ShopResponseValidationError is the validation error returned by
// ShopResponse.Validate if the designated constraints aren't met.
type ShopResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShopResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShopResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShopResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShopResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShopResponseValidationError) ErrorName() string { return "ShopResponseValidationError" }

// Error satisfies the builtin error interface
func (e ShopResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShopResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShopResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShopResponseValidationError{}

// Validate checks the field values on EmptyShopResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EmptyShopResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyShopResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmptyShopResponseMultiError, or nil if none found.
func (m *EmptyShopResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyShopResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := EmptyShopResponseValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() <= 0 {
		err := EmptyShopResponseValidationError{
			field:  "Offset",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EmptyShopResponseMultiError(errors)
	}

	return nil
}

// EmptyShopResponseMultiError is an error wrapping multiple validation errors
// returned by EmptyShopResponse.ValidateAll() if the designated constraints
// aren't met.
type EmptyShopResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyShopResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyShopResponseMultiError) AllErrors() []error { return m }

// EmptyShopResponseValidationError is the validation error returned by
// EmptyShopResponse.Validate if the designated constraints aren't met.
type EmptyShopResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyShopResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyShopResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyShopResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyShopResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyShopResponseValidationError) ErrorName() string {
	return "EmptyShopResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EmptyShopResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyShopResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyShopResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyShopResponseValidationError{}
