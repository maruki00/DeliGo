// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: profile.proto

package profile_grpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Profile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Profile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Profile with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProfileMultiError, or nil if none found.
func (m *Profile) ValidateAll() error {
	return m.validate(true)
}

func (m *Profile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for UserID

	// no validation rules for FullName

	// no validation rules for Avatar

	// no validation rules for Bio

	if len(errors) > 0 {
		return ProfileMultiError(errors)
	}

	return nil
}

// ProfileMultiError is an error wrapping multiple validation errors returned
// by Profile.ValidateAll() if the designated constraints aren't met.
type ProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileMultiError) AllErrors() []error { return m }

// ProfileValidationError is the validation error returned by Profile.Validate
// if the designated constraints aren't met.
type ProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileValidationError) ErrorName() string { return "ProfileValidationError" }

// Error satisfies the builtin error interface
func (e ProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileValidationError{}

// Validate checks the field values on CreateProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProfileRequestMultiError, or nil if none found.
func (m *CreateProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserID()); l < 4 || l > 32 {
		err := CreateProfileRequestValidationError{
			field:  "UserID",
			reason: "value length must be between 4 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFullName()); l < 4 || l > 56 {
		err := CreateProfileRequestValidationError{
			field:  "FullName",
			reason: "value length must be between 4 and 56 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateProfileRequest_FullName_Pattern.MatchString(m.GetFullName()) {
		err := CreateProfileRequestValidationError{
			field:  "FullName",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_ ]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAvatar()); l < 4 || l > 255 {
		err := CreateProfileRequestValidationError{
			field:  "Avatar",
			reason: "value length must be between 4 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetBio()); l < 0 || l > 255 {
		err := CreateProfileRequestValidationError{
			field:  "Bio",
			reason: "value length must be between 0 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateProfileRequestMultiError(errors)
	}

	return nil
}

// CreateProfileRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProfileRequestMultiError) AllErrors() []error { return m }

// CreateProfileRequestValidationError is the validation error returned by
// CreateProfileRequest.Validate if the designated constraints aren't met.
type CreateProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProfileRequestValidationError) ErrorName() string {
	return "CreateProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProfileRequestValidationError{}

var _CreateProfileRequest_FullName_Pattern = regexp.MustCompile("^[a-zA-Z0-9_ ]+$")

// Validate checks the field values on DisableProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableProfileRequestMultiError, or nil if none found.
func (m *DisableProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 4 || l > 32 {
		err := DisableProfileRequestValidationError{
			field:  "ID",
			reason: "value length must be between 4 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DisableProfileRequestMultiError(errors)
	}

	return nil
}

// DisableProfileRequestMultiError is an error wrapping multiple validation
// errors returned by DisableProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type DisableProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableProfileRequestMultiError) AllErrors() []error { return m }

// DisableProfileRequestValidationError is the validation error returned by
// DisableProfileRequest.Validate if the designated constraints aren't met.
type DisableProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableProfileRequestValidationError) ErrorName() string {
	return "DisableProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableProfileRequestValidationError{}

// Validate checks the field values on GETRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GETRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GETRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GETRequestMultiError, or
// nil if none found.
func (m *GETRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GETRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQueryParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GETRequestValidationError{
					field:  "QueryParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GETRequestValidationError{
					field:  "QueryParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQueryParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GETRequestValidationError{
				field:  "QueryParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GETRequestMultiError(errors)
	}

	return nil
}

// GETRequestMultiError is an error wrapping multiple validation errors
// returned by GETRequest.ValidateAll() if the designated constraints aren't met.
type GETRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GETRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GETRequestMultiError) AllErrors() []error { return m }

// GETRequestValidationError is the validation error returned by
// GETRequest.Validate if the designated constraints aren't met.
type GETRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GETRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GETRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GETRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GETRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GETRequestValidationError) ErrorName() string { return "GETRequestValidationError" }

// Error satisfies the builtin error interface
func (e GETRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGETRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GETRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GETRequestValidationError{}

// Validate checks the field values on UpdateProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProfileRequestMultiError, or nil if none found.
func (m *UpdateProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 4 || l > 32 {
		err := UpdateProfileRequestValidationError{
			field:  "ID",
			reason: "value length must be between 4 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Fields

	if len(errors) > 0 {
		return UpdateProfileRequestMultiError(errors)
	}

	return nil
}

// UpdateProfileRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProfileRequestMultiError) AllErrors() []error { return m }

// UpdateProfileRequestValidationError is the validation error returned by
// UpdateProfileRequest.Validate if the designated constraints aren't met.
type UpdateProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProfileRequestValidationError) ErrorName() string {
	return "UpdateProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProfileRequestValidationError{}

// Validate checks the field values on UpdateProfileAvatareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProfileAvatareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProfileAvatareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProfileAvatareRequestMultiError, or nil if none found.
func (m *UpdateProfileAvatareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProfileAvatareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetID()); l < 4 || l > 32 {
		err := UpdateProfileAvatareRequestValidationError{
			field:  "ID",
			reason: "value length must be between 4 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAvatar()); l < 4 || l > 255 {
		err := UpdateProfileAvatareRequestValidationError{
			field:  "Avatar",
			reason: "value length must be between 4 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateProfileAvatareRequestMultiError(errors)
	}

	return nil
}

// UpdateProfileAvatareRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProfileAvatareRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateProfileAvatareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProfileAvatareRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProfileAvatareRequestMultiError) AllErrors() []error { return m }

// UpdateProfileAvatareRequestValidationError is the validation error returned
// by UpdateProfileAvatareRequest.Validate if the designated constraints
// aren't met.
type UpdateProfileAvatareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProfileAvatareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProfileAvatareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProfileAvatareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProfileAvatareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProfileAvatareRequestValidationError) ErrorName() string {
	return "UpdateProfileAvatareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProfileAvatareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProfileAvatareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProfileAvatareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProfileAvatareRequestValidationError{}

// Validate checks the field values on ProfileResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProfileResponseMultiError, or nil if none found.
func (m *ProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProfileResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProfileResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProfileResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProfileResponseMultiError(errors)
	}

	return nil
}

// ProfileResponseMultiError is an error wrapping multiple validation errors
// returned by ProfileResponse.ValidateAll() if the designated constraints
// aren't met.
type ProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileResponseMultiError) AllErrors() []error { return m }

// ProfileResponseValidationError is the validation error returned by
// ProfileResponse.Validate if the designated constraints aren't met.
type ProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileResponseValidationError) ErrorName() string { return "ProfileResponseValidationError" }

// Error satisfies the builtin error interface
func (e ProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileResponseValidationError{}

// Validate checks the field values on EmptyProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmptyProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmptyProfileResponseMultiError, or nil if none found.
func (m *EmptyProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := EmptyProfileResponseValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() <= 0 {
		err := EmptyProfileResponseValidationError{
			field:  "Offset",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EmptyProfileResponseMultiError(errors)
	}

	return nil
}

// EmptyProfileResponseMultiError is an error wrapping multiple validation
// errors returned by EmptyProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type EmptyProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyProfileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyProfileResponseMultiError) AllErrors() []error { return m }

// EmptyProfileResponseValidationError is the validation error returned by
// EmptyProfileResponse.Validate if the designated constraints aren't met.
type EmptyProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyProfileResponseValidationError) ErrorName() string {
	return "EmptyProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EmptyProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyProfileResponseValidationError{}
